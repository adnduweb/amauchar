/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/backend/core/js/custom/documentation/general/datatables/subtable.js":
/*!***************************************************************************************!*\
  !*** ./resources/backend/core/js/custom/documentation/general/datatables/subtable.js ***!
  \***************************************************************************************/
/***/ ((module) => {

eval(" // Class definition\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar KTDocsDatatableSubtable = function () {\n  var table;\n  var datatable;\n  var template; // Private methods\n\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[1].innerHTML, \"DD MMM YYYY, LT\").format(); // select date from 2nd column in table\n      // Skip template\n\n      if (!row.closest('[data-kt-docs-datatable-subtable=\"subtable_template\"]')) {\n        dateRow[1].setAttribute('data-order', realDate);\n        dateRow[1].innerText = moment(realDate).fromNow();\n      }\n    }); // Get subtable template\n\n    var subtable = document.querySelector('[data-kt-docs-datatable-subtable=\"subtable_template\"]');\n    template = subtable.cloneNode(true);\n    template.classList.remove('d-none'); // Remove subtable template\n\n    subtable.parentNode.removeChild(subtable); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      \"lengthChange\": false,\n      'pageLength': 6,\n      'ordering': false,\n      'paging': false,\n      'columnDefs': [{\n        orderable: false,\n        targets: 0\n      }, // Disable ordering on column 0 (checkbox)\n      {\n        orderable: false,\n        targets: 6\n      } // Disable ordering on column 6 (actions)\n      ]\n    }); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n\n    datatable.on('draw', function () {\n      resetSubtable();\n      handleActionButton();\n    });\n  }; // Subtable data sample\n\n\n  var data = [{\n    image: '76',\n    name: 'Go Pro 8',\n    description: 'Latest  version of Go Pro.',\n    cost: '500.00',\n    qty: '1',\n    total: '500.00',\n    stock: '12'\n  }, {\n    image: '60',\n    name: 'Bose Earbuds',\n    description: 'Top quality earbuds from Bose.',\n    cost: '300.00',\n    qty: '1',\n    total: '300.00',\n    stock: '8'\n  }, {\n    image: '211',\n    name: 'Dry-fit Sports T-shirt',\n    description: 'Comfortable sportswear for everyday use.',\n    cost: '89.00',\n    qty: '1',\n    total: '89.00',\n    stock: '18'\n  }, {\n    image: '21',\n    name: 'Apple Airpod 3',\n    description: 'Apple\\'s latest and most advanced earbuds.',\n    cost: '200.00',\n    qty: '2',\n    total: '400.00',\n    stock: '32'\n  }, {\n    image: '83',\n    name: 'Nike Pumps',\n    description: 'Apple\\'s latest and most advanced headphones.',\n    cost: '200.00',\n    qty: '1',\n    total: '200.00',\n    stock: '8'\n  }]; // Handle action button\n\n  var handleActionButton = function handleActionButton() {\n    var buttons = document.querySelectorAll('[data-kt-docs-datatable-subtable=\"expand_row\"]'); // Sample row items counter --- for demo purpose only, remove this variable in your project\n\n    var rowItems = [4, 1, 5, 1, 4, 2];\n    buttons.forEach(function (button, index) {\n      button.addEventListener('click', function (e) {\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        var row = button.closest('tr');\n        var rowClasses = ['isOpen', 'border-bottom-0']; // Get total number of items to generate --- for demo purpose only, remove this code snippet in your project\n\n        var demoData = [];\n\n        for (var j = 0; j < rowItems[index]; j++) {\n          demoData.push(data[j]);\n        } // End of generating demo data\n        // Handle subtable expanded state\n\n\n        if (row.classList.contains('isOpen')) {\n          var _row$classList;\n\n          // Remove all subtables from current order row\n          while (row.nextSibling && row.nextSibling.getAttribute('data-kt-docs-datatable-subtable') === 'subtable_template') {\n            row.nextSibling.parentNode.removeChild(row.nextSibling);\n          }\n\n          (_row$classList = row.classList).remove.apply(_row$classList, rowClasses);\n\n          button.classList.remove('active');\n        } else {\n          var _row$classList2;\n\n          populateTemplate(demoData, row);\n\n          (_row$classList2 = row.classList).add.apply(_row$classList2, rowClasses);\n\n          button.classList.add('active');\n        }\n      });\n    });\n  }; // Populate template with content/data -- content/data can be replaced with relevant data from database or API\n\n\n  var populateTemplate = function populateTemplate(data, target) {\n    data.forEach(function (d, index) {\n      // Clone template node\n      var newTemplate = template.cloneNode(true); // Stock badges\n\n      var lowStock = \"<div class=\\\"badge badge-light-warning\\\">Low Stock</div>\";\n      var inStock = \"<div class=\\\"badge badge-light-success\\\">In Stock</div>\"; // Select data elements\n\n      var image = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_image\"]');\n      var name = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_name\"]');\n      var description = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_description\"]');\n      var cost = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_cost\"]');\n      var qty = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_qty\"]');\n      var total = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_total\"]');\n      var stock = newTemplate.querySelector('[data-kt-docs-datatable-subtable=\"template_stock\"]'); // Populate elements with data\n\n      var imageSrc = image.getAttribute('src');\n      image.setAttribute('src', imageSrc + d.image + '.gif');\n      name.innerText = d.name;\n      description.innerText = d.description;\n      cost.innerText = d.cost;\n      qty.innerText = d.qty;\n      total.innerText = d.total;\n\n      if (d.stock > 10) {\n        stock.innerHTML = inStock;\n      } else {\n        stock.innerHTML = lowStock;\n      } // New template border controller\n      // When only 1 row is available\n\n\n      if (data.length === 1) {\n        var _newTemplate$querySel, _newTemplate$querySel2;\n\n        var borderClasses = ['rounded', 'rounded-end-0'];\n\n        (_newTemplate$querySel = newTemplate.querySelectorAll('td')[0].classList).add.apply(_newTemplate$querySel, _toConsumableArray(borderClasses));\n\n        borderClasses = ['rounded', 'rounded-start-0'];\n\n        (_newTemplate$querySel2 = newTemplate.querySelectorAll('td')[4].classList).add.apply(_newTemplate$querySel2, _toConsumableArray(borderClasses)); // Remove bottom border\n\n\n        newTemplate.classList.add('border-bottom-0');\n      } else {\n        // When multiple rows detected\n        if (index === data.length - 1) {\n          var _newTemplate$querySel3, _newTemplate$querySel4;\n\n          // first row\n          var _borderClasses = ['rounded-start', 'rounded-bottom-0'];\n\n          (_newTemplate$querySel3 = newTemplate.querySelectorAll('td')[0].classList).add.apply(_newTemplate$querySel3, _toConsumableArray(_borderClasses));\n\n          _borderClasses = ['rounded-end', 'rounded-bottom-0'];\n\n          (_newTemplate$querySel4 = newTemplate.querySelectorAll('td')[4].classList).add.apply(_newTemplate$querySel4, _toConsumableArray(_borderClasses));\n        }\n\n        if (index === 0) {\n          var _newTemplate$querySel5, _newTemplate$querySel6;\n\n          // last row\n          var _borderClasses2 = ['rounded-start', 'rounded-top-0'];\n\n          (_newTemplate$querySel5 = newTemplate.querySelectorAll('td')[0].classList).add.apply(_newTemplate$querySel5, _toConsumableArray(_borderClasses2));\n\n          _borderClasses2 = ['rounded-end', 'rounded-top-0'];\n\n          (_newTemplate$querySel6 = newTemplate.querySelectorAll('td')[4].classList).add.apply(_newTemplate$querySel6, _toConsumableArray(_borderClasses2)); // Remove bottom border on last row\n\n\n          newTemplate.classList.add('border-bottom-0');\n        }\n      } // Insert new template into table\n\n\n      var tbody = table.querySelector('tbody');\n      tbody.insertBefore(newTemplate, target.nextSibling);\n    });\n  }; // Reset subtable\n\n\n  var resetSubtable = function resetSubtable() {\n    var subtables = document.querySelectorAll('[data-kt-docs-datatable-subtable=\"subtable_template\"]');\n    subtables.forEach(function (st) {\n      st.parentNode.removeChild(st);\n    });\n    var rows = table.querySelectorAll('tbody tr');\n    rows.forEach(function (r) {\n      r.classList.remove('isOpen');\n\n      if (r.querySelector('[data-kt-docs-datatable-subtable=\"expand_row\"]')) {\n        r.querySelector('[data-kt-docs-datatable-subtable=\"expand_row\"]').classList.remove('active');\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      table = document.querySelector('#kt_docs_datatable_subtable');\n\n      if (!table) {\n        return;\n      }\n\n      initDatatable();\n      handleActionButton();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTDocsDatatableSubtable;\n} // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTDocsDatatableSubtable.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/backend/core/js/custom/documentation/general/datatables/subtable.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/backend/core/js/custom/documentation/general/datatables/subtable.js");
/******/ 	
/******/ })()
;