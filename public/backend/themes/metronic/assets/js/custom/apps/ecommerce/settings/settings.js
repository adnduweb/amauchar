/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/backend/core/js/custom/apps/ecommerce/settings/settings.js":
/*!******************************************************************************!*\
  !*** ./resources/backend/core/js/custom/apps/ecommerce/settings/settings.js ***!
  \******************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTAppEcommerceSettings = function () {\n  // Shared variables\n  // Private functions\n  var initForms = function initForms() {\n    var forms = ['kt_ecommerce_settings_general_form', 'kt_ecommerce_settings_general_store', 'kt_ecommerce_settings_general_localization', 'kt_ecommerce_settings_general_products', 'kt_ecommerce_settings_general_customers']; // Init all forms\n\n    forms.forEach(function (formId) {\n      // Select form\n      var form = document.getElementById(formId);\n\n      if (!form) {\n        return;\n      } // Dynamically create validation non-empty rule\n\n\n      var requiredFields = form.querySelectorAll('.required');\n      var detectedField;\n      var validationFields = {\n        fields: {},\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      }; // Detect required fields\n\n      requiredFields.forEach(function (el) {\n        var input = el.closest('.row').querySelector('input');\n\n        if (input) {\n          detectedField = input;\n        }\n\n        var textarea = el.closest('.row').querySelector('textarea');\n\n        if (textarea) {\n          detectedField = textarea;\n        }\n\n        var select = el.closest('.row').querySelector('select');\n\n        if (select) {\n          detectedField = select;\n        } // Add validation rule                \n\n\n        var name = detectedField.getAttribute('name');\n        validationFields.fields[name] = {\n          validators: {\n            notEmpty: {\n              message: el.innerText + ' is required'\n            }\n          }\n        };\n      }); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n      var validator = FormValidation.formValidation(form, validationFields); // Submit button handler\n\n      var submitButton = form.querySelector('[data-kt-ecommerce-settings-type=\"submit\"]');\n      submitButton.addEventListener('click', function (e) {\n        // Prevent default button action\n        e.preventDefault(); // Validate form before submit\n\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n\n            if (status == 'Valid') {\n              // Show loading indication\n              submitButton.setAttribute('data-kt-indicator', 'on'); // Disable button to avoid multiple click \n\n              submitButton.disabled = true; // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\n\n              setTimeout(function () {\n                // Remove loading indication\n                submitButton.removeAttribute('data-kt-indicator'); // Enable button\n\n                submitButton.disabled = false; // Show popup confirmation \n\n                Swal.fire({\n                  text: \"Form has been successfully submitted!\",\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Ok, got it!\",\n                  customClass: {\n                    confirmButton: \"btn btn-primary\"\n                  }\n                }); //form.submit(); // Submit form\n              }, 2000);\n            } else {\n              // Show popup error \n              Swal.fire({\n                text: \"Oops! There are some error(s) detected.\",\n                icon: \"error\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              });\n            }\n          });\n        }\n      });\n    });\n  }; // Init Tagify\n\n\n  var initTagify = function initTagify() {\n    // Get tagify elements\n    var elements = document.querySelectorAll('[data-kt-ecommerce-settings-type=\"tagify\"]'); // Init tagify\n\n    elements.forEach(function (element) {\n      new Tagify(element);\n    });\n  }; // Init Select2 with flags\n\n\n  var initSelect2Flags = function initSelect2Flags() {\n    // Format options\n    var optionFormat = function optionFormat(item) {\n      if (!item.id) {\n        return item.text;\n      }\n\n      var span = document.createElement('span');\n      var template = '';\n      template += '<img src=\"' + item.element.getAttribute('data-kt-select2-country') + '\" class=\"rounded-circle h-20px me-2\" alt=\"image\"/>';\n      template += item.text;\n      span.innerHTML = template;\n      return $(span);\n    }; // Init Select2 --- more info: https://select2.org/\n\n\n    $('[data-kt-ecommerce-settings-type=\"select2_flags\"]').select2({\n      placeholder: \"Select a country\",\n      minimumResultsForSearch: Infinity,\n      templateSelection: optionFormat,\n      templateResult: optionFormat\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      initForms();\n      initTagify();\n      initSelect2Flags();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppEcommerceSettings.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/backend/core/js/custom/apps/ecommerce/settings/settings.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/backend/core/js/custom/apps/ecommerce/settings/settings.js"]();
/******/ 	
/******/ })()
;