/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/backend/core/js/custom/apps/subscriptions/add/products.js":
/*!*****************************************************************************!*\
  !*** ./resources/backend/core/js/custom/apps/subscriptions/add/products.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("\n\nvar KTSubscriptionsProducts = function () {\n  // Shared variables\n  var table;\n  var datatable;\n  var modalEl;\n  var modal;\n\n  var initDatatable = function initDatatable() {\n    // Init datatable --- more info on datatables: https://datatables.net/manual/        \n    datatable = $(table).DataTable({\n      \"info\": false,\n      'order': [],\n      'ordering': false,\n      'paging': false,\n      \"lengthChange\": false\n    });\n  }; // Delete product\n\n\n  var deleteProduct = function deleteProduct() {\n    KTUtil.on(table, '[data-kt-action=\"product_remove\"]', 'click', function (e) {\n      e.preventDefault(); // Select parent row\n\n      var parent = e.target.closest('tr'); // Get customer name\n\n      var productName = parent.querySelectorAll('td')[0].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n      Swal.fire({\n        text: \"Are you sure you want to delete \" + productName + \"?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted \" + productName + \"!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove current row\n            datatable.row($(parent)).remove().draw();\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: customerName + \" was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Modal handlers\n\n\n  var addProduct = function addProduct() {\n    // Select modal buttons\n    var closeButton = modalEl.querySelector('#kt_modal_add_product_close');\n    var cancelButton = modalEl.querySelector('#kt_modal_add_product_cancel');\n    var submitButton = modalEl.querySelector('#kt_modal_add_product_submit'); // Cancel button action\n\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // Add customer button handler\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault(); // Check all radio buttons\n\n      var radio = modalEl.querySelector('input[type=\"radio\"]:checked'); // Define datatable row node\n\n      var rowNode;\n\n      if (radio && radio.checked === true) {\n        rowNode = datatable.row.add([radio.getAttribute('data-kt-product-name'), '1', radio.getAttribute('data-kt-product-price') + ' / ' + radio.getAttribute('data-kt-product-frequency'), table.querySelector('tbody tr td:last-child').innerHTML]).draw().node(); // Add custom class to last column -- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n\n        $(rowNode).find('td').eq(3).addClass('text-end');\n      }\n\n      modal.hide(); // Remove modal\n    });\n  };\n\n  return {\n    init: function init() {\n      modalEl = document.getElementById('kt_modal_add_product'); // Select modal -- more info on Bootstrap modal: https://getbootstrap.com/docs/5.0/components/modal/\n\n      modal = new bootstrap.Modal(modalEl);\n      table = document.querySelector('#kt_subscription_products_table');\n      initDatatable();\n      deleteProduct();\n      addProduct();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTSubscriptionsProducts.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/backend/core/js/custom/apps/subscriptions/add/products.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/backend/core/js/custom/apps/subscriptions/add/products.js"]();
/******/ 	
/******/ })()
;