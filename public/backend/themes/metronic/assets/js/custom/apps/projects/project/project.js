/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/backend/core/js/custom/apps/projects/project/project.js":
/*!***************************************************************************!*\
  !*** ./resources/backend/core/js/custom/apps/projects/project/project.js ***!
  \***************************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTProjectOverview = function () {\n  // Colors\n  var primary = KTUtil.getCssVariableValue('--bs-primary');\n  var lightPrimary = KTUtil.getCssVariableValue('--bs-light-primary');\n  var success = KTUtil.getCssVariableValue('--bs-success');\n  var lightSuccess = KTUtil.getCssVariableValue('--bs-light-success');\n  var gray200 = KTUtil.getCssVariableValue('--bs-gray-200');\n  var gray500 = KTUtil.getCssVariableValue('--bs-gray-500'); // Private functions\n\n  var initChart = function initChart() {\n    // init chart\n    var element = document.getElementById(\"project_overview_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var config = {\n      type: 'doughnut',\n      data: {\n        datasets: [{\n          data: [30, 45, 25],\n          backgroundColor: ['#00A3FF', '#50CD89', '#E4E6EF']\n        }],\n        labels: ['Active', 'Completed', 'Yet to start']\n      },\n      options: {\n        chart: {\n          fontFamily: 'inherit'\n        },\n        cutoutPercentage: 75,\n        responsive: true,\n        maintainAspectRatio: false,\n        cutout: '75%',\n        title: {\n          display: false\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        },\n        tooltips: {\n          enabled: true,\n          intersect: false,\n          mode: 'nearest',\n          bodySpacing: 5,\n          yPadding: 10,\n          xPadding: 10,\n          caretPadding: 0,\n          displayColors: false,\n          backgroundColor: '#20D489',\n          titleFontColor: '#ffffff',\n          cornerRadius: 4,\n          footerSpacing: 0,\n          titleSpacing: 0\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    };\n    var ctx = element.getContext('2d');\n    var myDoughnut = new Chart(ctx, config);\n  };\n\n  var initGraph = function initGraph() {\n    var element = document.getElementById(\"kt_project_overview_graph\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Incomplete',\n        data: [70, 70, 80, 80, 75, 75, 75]\n      }, {\n        name: 'Complete',\n        data: [55, 55, 60, 60, 55, 55, 60]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [primary, success]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: gray500,\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: primary,\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: gray500,\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return val + \" tasks\";\n          }\n        }\n      },\n      colors: [lightPrimary, lightSuccess],\n      grid: {\n        borderColor: gray200,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        //size: 5,\n        colors: [lightPrimary, lightSuccess],\n        strokeColor: [primary, success],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initTable = function initTable() {\n    var table = document.querySelector('#kt_profile_overview_table');\n\n    if (!table) {\n      return;\n    } // Set date data order\n\n\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var realDate = moment(dateRow[1].innerHTML, \"MMM D, YYYY\").format();\n      dateRow[1].setAttribute('data-order', realDate);\n    }); // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n    var datatable = $(table).DataTable({\n      \"info\": false,\n      'order': []\n    }); // Filter dropdown elements\n\n    var filterOrders = document.getElementById('kt_filter_orders');\n    var filterYear = document.getElementById('kt_filter_year'); // Filter by order status --- official docs reference: https://datatables.net/reference/api/search()\n\n    filterOrders.addEventListener('change', function (e) {\n      datatable.column(3).search(e.target.value).draw();\n    }); // Filter by date --- official docs reference: https://momentjs.com/docs/\n\n    var minDate;\n    var maxDate;\n    filterYear.addEventListener('change', function (e) {\n      var value = e.target.value;\n\n      switch (value) {\n        case 'thisyear':\n          {\n            minDate = moment().startOf('year').format();\n            maxDate = moment().endOf('year').format();\n            datatable.draw();\n            break;\n          }\n\n        case 'thismonth':\n          {\n            minDate = moment().startOf('month').format();\n            maxDate = moment().endOf('month').format();\n            datatable.draw();\n            break;\n          }\n\n        case 'lastmonth':\n          {\n            minDate = moment().subtract(1, 'months').startOf('month').format();\n            maxDate = moment().subtract(1, 'months').endOf('month').format();\n            datatable.draw();\n            break;\n          }\n\n        case 'last90days':\n          {\n            minDate = moment().subtract(30, 'days').format();\n            maxDate = moment().format();\n            datatable.draw();\n            break;\n          }\n\n        default:\n          {\n            minDate = moment().subtract(100, 'years').startOf('month').format();\n            maxDate = moment().add(1, 'months').endOf('month').format();\n            datatable.draw();\n            break;\n          }\n      }\n    }); // Date range filter --- offical docs reference: https://datatables.net/examples/plug-ins/range_filtering.html\n\n    $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {\n      var min = minDate;\n      var max = maxDate;\n      var date = parseFloat(moment(data[1]).format()) || 0; // use data for the age column\n\n      if (isNaN(min) && isNaN(max) || isNaN(min) && date <= max || min <= date && isNaN(max) || min <= date && date <= max) {\n        return true;\n      }\n\n      return false;\n    }); // Search --- official docs reference: https://datatables.net/reference/api/search()\n\n    var filterSearch = document.getElementById('kt_filter_search');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      initChart();\n      initGraph();\n      initTable();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTProjectOverview.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYmFja2VuZC9jb3JlL2pzL2N1c3RvbS9hcHBzL3Byb2plY3RzL3Byb2plY3QvcHJvamVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxpQkFBaUIsR0FBRyxZQUFZO0FBQ2hDO0FBQ0EsTUFBSUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLG1CQUFQLENBQTJCLGNBQTNCLENBQWQ7QUFDQSxNQUFJQyxZQUFZLEdBQUdGLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBMkIsb0JBQTNCLENBQW5CO0FBQ0EsTUFBSUUsT0FBTyxHQUFHSCxNQUFNLENBQUNDLG1CQUFQLENBQTJCLGNBQTNCLENBQWQ7QUFDQSxNQUFJRyxZQUFZLEdBQUdKLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBMkIsb0JBQTNCLENBQW5CO0FBQ0EsTUFBSUksT0FBTyxHQUFHTCxNQUFNLENBQUNDLG1CQUFQLENBQTJCLGVBQTNCLENBQWQ7QUFDQSxNQUFJSyxPQUFPLEdBQUdOLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBMkIsZUFBM0IsQ0FBZCxDQVBnQyxDQVNoQzs7QUFDQSxNQUFJTSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFZO0FBQ3hCO0FBQ0EsUUFBSUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0Isd0JBQXhCLENBQWQ7O0FBRUEsUUFBSSxDQUFDRixPQUFMLEVBQWM7QUFDVjtBQUNIOztBQUVELFFBQUlHLE1BQU0sR0FBRztBQUNUQyxNQUFBQSxJQUFJLEVBQUUsVUFERztBQUVUQyxNQUFBQSxJQUFJLEVBQUU7QUFDRkMsUUFBQUEsUUFBUSxFQUFFLENBQUM7QUFDUEQsVUFBQUEsSUFBSSxFQUFFLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULENBREM7QUFFUEUsVUFBQUEsZUFBZSxFQUFFLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkI7QUFGVixTQUFELENBRFI7QUFLRkMsUUFBQUEsTUFBTSxFQUFFLENBQUMsUUFBRCxFQUFXLFdBQVgs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QUNqQzlJLEVBQUFBLGlCQUFpQixDQUFDNkksSUFBbEI7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2JhY2tlbmQvY29yZS9qcy9jdXN0b20vYXBwcy9wcm9qZWN0cy9wcm9qZWN0L3Byb2plY3QuanM/MTY1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUUHJvamVjdE92ZXJ2aWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ29sb3JzXHJcbiAgICB2YXIgcHJpbWFyeSA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcclxuICAgIHZhciBsaWdodFByaW1hcnkgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1wcmltYXJ5Jyk7XHJcbiAgICB2YXIgc3VjY2VzcyA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXN1Y2Nlc3MnKTtcclxuICAgIHZhciBsaWdodFN1Y2Nlc3MgPSBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1zdWNjZXNzJyk7XHJcbiAgICB2YXIgZ3JheTIwMCA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktMjAwJyk7XHJcbiAgICB2YXIgZ3JheTUwMCA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyk7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBpbml0Q2hhcnQgPSBmdW5jdGlvbiAoKSB7ICAgICAgICBcclxuICAgICAgICAvLyBpbml0IGNoYXJ0XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3Rfb3ZlcnZpZXdfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnZG91Z2hudXQnLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDQ1LCAyNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBbJyMwMEEzRkYnLCAnIzUwQ0Q4OScsICcjRTRFNkVGJ11cclxuICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiBbJ0FjdGl2ZScsICdDb21wbGV0ZWQnLCAnWWV0IHRvIHN0YXJ0J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjdXRvdXRQZXJjZW50YWdlOiA3NSxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGN1dG91dDogJzc1JScsXHJcbiAgICAgICAgICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0b29sdGlwczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlOiAnbmVhcmVzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keVNwYWNpbmc6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgeVBhZGRpbmc6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIHhQYWRkaW5nOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBjYXJldFBhZGRpbmc6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUNvbG9yczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzIwRDQ4OScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6ICcjZmZmZmZmJyxcclxuICAgICAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVyU3BhY2luZzogMCxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZVNwYWNpbmc6IDBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGN0eCA9IGVsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICB2YXIgbXlEb3VnaG51dCA9IG5ldyBDaGFydChjdHgsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRHcmFwaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfcHJvamVjdF9vdmVydmlld19ncmFwaFwiKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdJbmNvbXBsZXRlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs3MCwgNzAsIDgwLCA4MCwgNzUsIDc1LCA3NV1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ0NvbXBsZXRlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs1NSwgNTUsIDYwLCA2MCwgNTUsIDU1LCA2MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW3ByaW1hcnksIHN1Y2Nlc3NdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZyddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBncmF5NTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHByaW1hcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBncmF5NTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArIFwiIHRhc2tzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW2xpZ2h0UHJpbWFyeSwgbGlnaHRTdWNjZXNzXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGdyYXkyMDAsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIC8vc2l6ZTogNSxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW2xpZ2h0UHJpbWFyeSwgbGlnaHRTdWNjZXNzXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbcHJpbWFyeSwgc3VjY2Vzc10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRUYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfcHJvZmlsZV9vdmVydmlld190YWJsZScpO1xyXG5cclxuICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBkYXRlIGRhdGEgb3JkZXJcclxuICAgICAgICBjb25zdCB0YWJsZVJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xyXG5cclxuICAgICAgICB0YWJsZVJvd3MuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlUm93ID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxEYXRlID0gbW9tZW50KGRhdGVSb3dbMV0uaW5uZXJIVE1MLCBcIk1NTSBELCBZWVlZXCIpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICBkYXRlUm93WzFdLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmRlcicsIHJlYWxEYXRlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gSW5pdCBkYXRhdGFibGUgLS0tIG1vcmUgaW5mbyBvbiBkYXRhdGFibGVzOiBodHRwczovL2RhdGF0YWJsZXMubmV0L21hbnVhbC9cclxuICAgICAgICBjb25zdCBkYXRhdGFibGUgPSAkKHRhYmxlKS5EYXRhVGFibGUoe1xyXG4gICAgICAgICAgICBcImluZm9cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICdvcmRlcic6IFtdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciBkcm9wZG93biBlbGVtZW50c1xyXG4gICAgICAgIGNvbnN0IGZpbHRlck9yZGVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9maWx0ZXJfb3JkZXJzJyk7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyWWVhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9maWx0ZXJfeWVhcicpO1xyXG5cclxuICAgICAgICAvLyBGaWx0ZXIgYnkgb3JkZXIgc3RhdHVzIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9yZWZlcmVuY2UvYXBpL3NlYXJjaCgpXHJcbiAgICAgICAgZmlsdGVyT3JkZXJzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGRhdGF0YWJsZS5jb2x1bW4oMykuc2VhcmNoKGUudGFyZ2V0LnZhbHVlKS5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciBieSBkYXRlIC0tLSBvZmZpY2lhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy9cclxuICAgICAgICB2YXIgbWluRGF0ZTtcclxuICAgICAgICB2YXIgbWF4RGF0ZTtcclxuXHJcbiAgICAgICAgZmlsdGVyWWVhci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0aGlzeWVhcic6IHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5EYXRlID0gbW9tZW50KCkuc3RhcnRPZigneWVhcicpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSBtb21lbnQoKS5lbmRPZigneWVhcicpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0aGlzbW9udGgnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IG1vbWVudCgpLnN0YXJ0T2YoJ21vbnRoJykuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZSA9IG1vbWVudCgpLmVuZE9mKCdtb250aCcpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsYXN0bW9udGgnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IG1vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aHMnKS5zdGFydE9mKCdtb250aCcpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnbW9udGhzJykuZW5kT2YoJ21vbnRoJykuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xhc3Q5MGRheXMnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluRGF0ZSA9IG1vbWVudCgpLnN1YnRyYWN0KDMwLCAnZGF5cycpLmZvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heERhdGUgPSBtb21lbnQoKS5mb3JtYXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhdGFibGUuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkRhdGUgPSBtb21lbnQoKS5zdWJ0cmFjdCgxMDAsICd5ZWFycycpLnN0YXJ0T2YoJ21vbnRoJykuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4RGF0ZSA9IG1vbWVudCgpLmFkZCgxLCAnbW9udGhzJykuZW5kT2YoJ21vbnRoJykuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBEYXRlIHJhbmdlIGZpbHRlciAtLS0gb2ZmaWNhbCBkb2NzIHJlZmVyZW5jZTogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9leGFtcGxlcy9wbHVnLWlucy9yYW5nZV9maWx0ZXJpbmcuaHRtbFxyXG4gICAgICAgICQuZm4uZGF0YVRhYmxlLmV4dC5zZWFyY2gucHVzaChcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHNldHRpbmdzLCBkYXRhLCBkYXRhSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtaW4gPSBtaW5EYXRlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heCA9IG1heERhdGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IHBhcnNlRmxvYXQobW9tZW50KGRhdGFbMV0pLmZvcm1hdCgpKSB8fCAwOyAvLyB1c2UgZGF0YSBmb3IgdGhlIGFnZSBjb2x1bW5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKGlzTmFOKG1pbikgJiYgaXNOYU4obWF4KSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaXNOYU4obWluKSAmJiBkYXRlIDw9IG1heCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAobWluIDw9IGRhdGUgJiYgaXNOYU4obWF4KSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAobWluIDw9IGRhdGUgJiYgZGF0ZSA8PSBtYXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBTZWFyY2ggLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgICAgICB2YXIgZmlsdGVyU2VhcmNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X2ZpbHRlcl9zZWFyY2gnKTtcclxuICAgICAgICBmaWx0ZXJTZWFyY2guYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBkYXRhdGFibGUuc2VhcmNoKGUudGFyZ2V0LnZhbHVlKS5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbml0Q2hhcnQoKTtcclxuICAgICAgICAgICAgaW5pdEdyYXBoKCk7XHJcbiAgICAgICAgICAgIGluaXRUYWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSgpO1xyXG5cclxuXHJcbi8vIE9uIGRvY3VtZW50IHJlYWR5XHJcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24oKSB7XHJcbiAgICBLVFByb2plY3RPdmVydmlldy5pbml0KCk7XHJcbn0pOyJdLCJuYW1lcyI6WyJLVFByb2plY3RPdmVydmlldyIsInByaW1hcnkiLCJLVFV0aWwiLCJnZXRDc3NWYXJpYWJsZVZhbHVlIiwibGlnaHRQcmltYXJ5Iiwic3VjY2VzcyIsImxpZ2h0U3VjY2VzcyIsImdyYXkyMDAiLCJncmF5NTAwIiwiaW5pdENoYXJ0IiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb25maWciLCJ0eXBlIiwiZGF0YSIsImRhdGFzZXRzIiwiYmFja2dyb3VuZENvbG9yIiwibGFiZWxzIiwib3B0aW9ucyIsImNoYXJ0IiwiZm9udEZhbWlseSIsImN1dG91dFBlcmNlbnRhZ2UiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImN1dG91dCIsInRpdGxlIiwiZGlzcGxheSIsImFuaW1hdGlvbiIsImFuaW1hdGVTY2FsZSIsImFuaW1hdGVSb3RhdGUiLCJ0b29sdGlwcyIsImVuYWJsZWQiLCJpbnRlcnNlY3QiLCJtb2RlIiwiYm9keVNwYWNpbmciLCJ5UGFkZGluZyIsInhQYWRkaW5nIiwiY2FyZXRQYWRkaW5nIiwiZGlzcGxheUNvbG9ycyIsInRpdGxlRm9udENvbG9yIiwiY29ybmVyUmFkaXVzIiwiZm9vdGVyU3BhY2luZyIsInRpdGxlU3BhY2luZyIsInBsdWdpbnMiLCJsZWdlbmQiLCJjdHgiLCJnZXRDb250ZXh0IiwibXlEb3VnaG51dCIsIkNoYXJ0IiwiaW5pdEdyYXBoIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJjc3MiLCJzZXJpZXMiLCJuYW1lIiwidG9vbGJhciIsInNob3ciLCJwbG90T3B0aW9ucyIsImRhdGFMYWJlbHMiLCJmaWxsIiwib3BhY2l0eSIsInN0cm9rZSIsImN1cnZlIiwid2lkdGgiLCJjb2xvcnMiLCJ4YXhpcyIsImNhdGVnb3JpZXMiLCJheGlzQm9yZGVyIiwiYXhpc1RpY2tzIiwic3R5bGUiLCJmb250U2l6ZSIsImNyb3NzaGFpcnMiLCJwb3NpdGlvbiIsImNvbG9yIiwiZGFzaEFycmF5IiwidG9vbHRpcCIsImZvcm1hdHRlciIsInVuZGVmaW5lZCIsIm9mZnNldFkiLCJ5YXhpcyIsInN0YXRlcyIsIm5vcm1hbCIsImZpbHRlciIsInZhbHVlIiwiaG92ZXIiLCJhY3RpdmUiLCJhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbiIsInkiLCJ2YWwiLCJncmlkIiwiYm9yZGVyQ29sb3IiLCJzdHJva2VEYXNoQXJyYXkiLCJsaW5lcyIsIm1hcmtlcnMiLCJzdHJva2VDb2xvciIsInN0cm9rZVdpZHRoIiwiQXBleENoYXJ0cyIsInJlbmRlciIsImluaXRUYWJsZSIsInRhYmxlIiwicXVlcnlTZWxlY3RvciIsInRhYmxlUm93cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwicm93IiwiZGF0ZVJvdyIsInJlYWxEYXRlIiwibW9tZW50IiwiaW5uZXJIVE1MIiwiZm9ybWF0Iiwic2V0QXR0cmlidXRlIiwiZGF0YXRhYmxlIiwiJCIsIkRhdGFUYWJsZSIsImZpbHRlck9yZGVycyIsImZpbHRlclllYXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNvbHVtbiIsInNlYXJjaCIsInRhcmdldCIsImRyYXciLCJtaW5EYXRlIiwibWF4RGF0ZSIsInN0YXJ0T2YiLCJlbmRPZiIsInN1YnRyYWN0IiwiYWRkIiwiZm4iLCJkYXRhVGFibGUiLCJleHQiLCJwdXNoIiwic2V0dGluZ3MiLCJkYXRhSW5kZXgiLCJtaW4iLCJtYXgiLCJkYXRlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiZmlsdGVyU2VhcmNoIiwiaW5pdCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/backend/core/js/custom/apps/projects/project/project.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/backend/core/js/custom/apps/projects/project/project.js"]();
/******/ 	
/******/ })()
;